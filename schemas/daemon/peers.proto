syntax = "proto3";

message PeerInfo {
  bytes noiseKey = 1;
  string address = 2;
  string type = 3;
}

/**
 * Get the NOISE public key corresponding to an alias.
 */
message GetKeyRequest {
  uint32 alias = 1;
}
message GetKeyResponse {
  bytes key = 1;
}

/**
 * Get or create an alias for a NOISE key.
 */
message GetAliasRequest {
  bytes key = 1;
}
message GetAliasResponse {
  uint32 alias = 1;
}

/**
 * Start watching for peers joining/leaving a discovery key topic.
 */
message WatchPeersRequest {
  bytes discoveryKey = 1;
}
message WatchPeersResponse {
  enum Type {
    Joined = 0;
    Left = 1;
  }
  Type type = 1;
  repeated uint32 peers = 2;
}

/**
 * List peers (either all peers, or those swarming around a particular discovery key.
 */
message ListPeersRequest {
  bytes discoveryKey = 1;
}
message ListPeersResponse {
  repeated PeerInfo peers = 1;
}

service Peers {
  rpc getKey (GetKeyRequest) returns (GetKeyResponse);
  rpc getAlias (GetAliasRequest) returns (GetAliasResponse);
  rpc listPeers (ListPeersRequest) returns (ListPeersResponse);
  rpc watchPeers (WatchPeersRequest) returns (stream WatchPeersResponse);
}