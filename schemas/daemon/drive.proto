syntax = "proto3";

import "daemon/common.proto";
import "hyperdrive.proto";

// Cross-drive operations

/**
 * Create a session for a hyperdrive by key, version, and hash.
 */
message GetDriveRequest {
  HyperdriveOptions opts = 1; // Hyperdrive options.
}
message GetDriveResponse {
  uint64 id = 1; // A new session ID.
  HyperdriveOptions opts = 2; // Hyperdrive options.
}

/**
 * Get networking statistics across all drives.
 */
message StatsRequest {
  bool networkingOnly = 1;
}
message StatsResponse {
  repeated DriveStats stats = 1;
}

/**
 * Get networking configurations for all drive.
 */
message NetworkConfigurationsRequest {}
message NetworkConfigurationsResponse {
  repeated NetworkConfiguration configurations = 2;
}

/**
 * Get the list of drives that are being advertised.
 */
message ActiveRequest {}
message ActiveResponse {
  repeated HyperdriveOptions drives = 1;
}

// Session-specific operations

/**
 * Change the networking options for a drive.
 */
message ConfigureNetworkRequest {
  uint64 id = 1; // A session ID.
  NetworkConfiguration network = 2; // The network configuration.
}
message ConfigureNetworkResponse {}

/**
 * Get networking statistics for a single drive.
 */
message DriveStatsRequest {
  uint64 id = 1; // A session ID.
  bool recursive = 2; // Optionally recurse into mountpoints.
  bool networkingOnly = 3; // Only return networking stats.
}
message DriveStatsResponse {
  DriveStats stats = 1;
  NetworkConfiguration network = 2;
}

/**
 * Get mount information for a single drive.
 */
message DriveMountsRequest {
  uint64 id = 1; // A session ID.
  bool recursive = 2; // List mounts recursively.
  bool memory = 3; // Only list mounts that are currently cached in memory.
}
message DriveMountsResponse {
  repeated MountInfo mounts = 1;
}

// Drive operations

/**
 * Hyperdrive.version
 *
 * Get the version of a drive.
 */
message DriveVersionRequest {
  uint64 id = 1; // A session ID.
}
message DriveVersionResponse {
  uint64 version = 1;
}

/**
 * Create a file write stream.
 */
message WriteStreamRequest {
  uint64 id = 1; // A session ID.
  string path = 2; // The file path.
  bytes chunk = 3; // A file contents chunk.
  Stat opts = 4; // Optional Stat options.
}
message WriteStreamResponse {}

/**
 * Write a file.
 */
message WriteFileRequest {
  uint64 id = 1; // A session ID.
  string path = 2; // The file path.
  bytes chunk = 3; // A file contents chunk.
  Stat opts = 4; // Optional Stat object.
}
message WriteFileResponse {}

/**
 * Create a file read stream.
 */
message ReadStreamRequest {
  uint64 id = 1; // A session ID.
  string path = 2; // The file path.
  uint64 start = 3; // The file offset at which to start reading.
  uint64 end = 4; // The file offset at which to stop reading.
  uint64 length = 5; // The total length to read.
}
message ReadStreamResponse {
  bytes chunk = 1;
}

/**
 * Read a file.
 */
message ReadFileRequest {
  uint64 id = 1; // A session ID.
  string path = 2; // The file path.
}
message ReadFileResponse {
  bytes chunk = 1; // A file contents chunk.
}

/**
 * Update file metadata.
 */
message UpdateMetadataRequest {
  uint64 id = 1; // A session ID.
  string path = 2; // The file path.
  map<string, bytes> metadata = 3; // The updated file metadata.
}
message UpdateMetadataResponse {}

/**
 * Delete file metadata.
 */
message DeleteMetadataRequest {
  uint64 id = 1; // A session ID.
  string path = 2; // The file path.
  repeated string keys = 3; // The metadata keys to delete.
}
message DeleteMetadataResponse {}

/**
 * Hyperdrive.createDiffStream
 *
 * Create a diff stream between two versions, optionally within a specified prefix.
 */
message DiffStreamRequest {
  uint64 id = 1; // A session ID.
  string prefix = 2; // An optional prefix.
  uint64 other = 3; // The other version (default 0).
}
message DiffStreamResponse {
  string type = 1;
  string name = 2;
  DiffEntry value = 3;
}

/**
 * Hyperdrive.open
 *
 * Opens a file descriptor.
 */
message OpenRequest {
  uint64 id = 1; // A session ID.
  string path = 2; // The file path.
  uint32 flags = 3; // File descriptor flags.
}
message OpenResponse {
  uint32 fd = 1; // A file descriptor that can be used in subsequent read/write operations.
}

/**
 * Hyperdrive.download
 *
 * Downloads file or directory contents.
 */
message DownloadRequest {
  uint64 id = 1; // A session ID.
  string path = 2; // The file path.
}
message DownloadResponse {
  uint64 downloadId = 2;
}

/**
 * Hyperdrive.undownload
 *
 * Stop a download that's in progress.
 */
message UndownloadRequest {
  uint64 id = 1; // A session ID.
  uint64 downloadId = 2; // A download ID.
}
message UndownloadResponse {}

// Hyperdrive.close (closes either a file descriptor or the whole drive).
message CloseRequest {
  uint64 id = 1;
  uint32 fd = 2;
}
message CloseResponse {
  uint32 fd = 1;
}

// Write to a FD previously opened with an OpenRequest.
message WriteRequest {
  uint64 id = 1;
  uint32 fd = 2;
  uint64 offset = 3;
  bytes contents = 4;
}
message WriteResponse {}

// Read from a FD previously opened with an OpenRequest.
message ReadRequest {
  uint64 id = 1;
  uint32 fd = 2;
  uint64 offset = 3;
  uint64 length = 4;
}
message ReadResponse {
  bytes content = 1;
}

// Hyperdrive.unlink
message UnlinkRequest {
  uint64 id = 1;
  string path = 2;
}
message UnlinkResponse {}

// Hyperdrive.readdir
message ReadDirectoryRequest {
  uint64 id = 1;
  string path = 2;
  bool recursive = 3;
  bool noMounts = 4;
  bool includeStats = 5;
}
message ReadDirectoryResponse {
  repeated string files = 1;
  repeated Stat stats = 2;
  repeated Mount mounts = 3;
  repeated string innerPaths = 4;
}

// Hyperdrive.mkdir
message MkdirRequest {
  uint64 id = 1;
  string path = 2;
  Stat opts = 3;
}
message MkdirResponse {}

// Hyperdrive.rmdir
message RmdirRequest {
  uint64 id = 1;
  string path = 2;
}
message RmdirResponse {}

// Hyperdrive.stat
message StatRequest {
  uint64 id = 1;
  string path = 2;
  bool lstat = 3;
}
message StatResponse {
  Stat stat = 1;
}

// Hyperdrive.watch
message WatchRequest {
  uint64 id = 1;
  string path = 2;
}
message WatchResponse {}

// Hyperdrive.mount
message MountDriveRequest {
  uint64 id = 1;
  MountInfo info = 2;
}
message MountDriveResponse {}

// Hyperdrive.unmount
message UnmountDriveRequest {
  uint64 id = 1;
  string path = 2;
}
message UnmountDriveResponse {}

// Hyperdrive.symlink
message SymlinkRequest {
  uint64 id = 1;
  string target = 2;
  string linkname = 3;
}
message SymlinkResponse {}

// Hyperdrive.fileStats
message FileStatsRequest {
  uint64 id = 1;
  string path = 2;
}
message FileStatsResponse {
  map<string, FileStats> stats = 1;
}

message CloseSessionRequest {
  uint64 id = 1;
}
message CloseSessionResponse {}

service Drive {
  // Management methods
  rpc get (GetDriveRequest) returns (GetDriveResponse);
  rpc close (CloseSessionRequest) returns (CloseSessionResponse);
  rpc allStats (StatsRequest) returns (StatsResponse);
  rpc allNetworkConfigurations (NetworkConfigurationsRequest) returns (NetworkConfigurationsResponse);
  rpc active (ActiveRequest) returns (ActiveResponse);

  // Session-specific operations
  rpc configureNetwork (ConfigureNetworkRequest) returns (ConfigureNetworkResponse);
  rpc stats (DriveStatsRequest) returns (DriveStatsResponse);

  // Drive operations
  rpc version (DriveVersionRequest) returns (DriveVersionResponse);
  rpc open (OpenRequest) returns (OpenResponse);
  rpc download (DownloadRequest) returns (DownloadResponse);
  rpc undownload (UndownloadRequest) returns (UndownloadResponse);
  rpc read (stream ReadRequest) returns (stream ReadResponse);
  rpc write (stream WriteRequest) returns (stream WriteResponse);
  rpc createWriteStream (stream WriteStreamRequest) returns (WriteStreamResponse);
  rpc writeFile (stream WriteFileRequest) returns (WriteFileResponse);
  rpc createReadStream (ReadStreamRequest) returns (stream ReadStreamResponse);
  rpc readFile (ReadFileRequest) returns (stream ReadFileResponse);
  rpc updateMetadata(UpdateMetadataRequest) returns (UpdateMetadataResponse);
  rpc deleteMetadata(DeleteMetadataRequest) returns (DeleteMetadataResponse);
  rpc createDiffStream (DiffStreamRequest) returns (stream DiffStreamResponse);
  rpc readdir (ReadDirectoryRequest) returns (ReadDirectoryResponse);
  rpc mkdir (MkdirRequest) returns (MkdirResponse);
  rpc rmdir (RmdirRequest) returns (RmdirResponse);
  rpc unlink (UnlinkRequest) returns (UnlinkResponse);
  rpc mount (MountDriveRequest) returns (MountDriveResponse);
  rpc unmount (UnmountDriveRequest) returns (UnmountDriveResponse);
  rpc mounts (DriveMountsRequest) returns (DriveMountsResponse);
  rpc stat (StatRequest) returns (StatResponse);
  rpc watch (stream WatchRequest) returns (stream WatchResponse);
  rpc symlink (SymlinkRequest) returns (SymlinkResponse);
  rpc fileStats (FileStatsRequest) returns (FileStatsResponse);
}